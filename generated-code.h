/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GENERATED_CODE_H__
#define __GENERATED_CODE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.pgaur.GDBUS. */

#define TYPE_GDBUS (gdbus_get_type ())
#define GDBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_GDBUS, GDBUS))
#define IS_GDBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_GDBUS))
#define GDBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_GDBUS, GDBUSIface))

struct _GDBUS;
typedef struct _GDBUS GDBUS;
typedef struct _GDBUSIface GDBUSIface;

struct _GDBUSIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_hello_world) (
    GDBUS *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_greeting);

  guint  (*get_status) (GDBUS *object);

  void (*notification) (
    GDBUS *object,
    gint arg_roll_number,
    const gchar *arg_name);

};

GType gdbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdbus_interface_info (void);
guint gdbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdbus_complete_hello_world (
    GDBUS *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus signal emissions functions: */
void gdbus_emit_notification (
    GDBUS *object,
    gint arg_roll_number,
    const gchar *arg_name);



/* D-Bus method calls: */
void gdbus_call_hello_world (
    GDBUS *proxy,
    const gchar *arg_greeting,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_call_hello_world_finish (
    GDBUS *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_call_hello_world_sync (
    GDBUS *proxy,
    const gchar *arg_greeting,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint gdbus_get_status (GDBUS *object);
void gdbus_set_status (GDBUS *object, guint value);


/* ---- */

#define TYPE_GDBUS_PROXY (gdbus_proxy_get_type ())
#define GDBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_GDBUS_PROXY, GDBUSProxy))
#define GDBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_GDBUS_PROXY, GDBUSProxyClass))
#define GDBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_GDBUS_PROXY, GDBUSProxyClass))
#define IS_GDBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_GDBUS_PROXY))
#define IS_GDBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_GDBUS_PROXY))

typedef struct _GDBUSProxy GDBUSProxy;
typedef struct _GDBUSProxyClass GDBUSProxyClass;
typedef struct _GDBUSProxyPrivate GDBUSProxyPrivate;

struct _GDBUSProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GDBUSProxyPrivate *priv;
};

struct _GDBUSProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdbus_proxy_get_type (void) G_GNUC_CONST;

void gdbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBUS *gdbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBUS *gdbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBUS *gdbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBUS *gdbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_GDBUS_SKELETON (gdbus_skeleton_get_type ())
#define GDBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_GDBUS_SKELETON, GDBUSSkeleton))
#define GDBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_GDBUS_SKELETON, GDBUSSkeletonClass))
#define GDBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_GDBUS_SKELETON, GDBUSSkeletonClass))
#define IS_GDBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_GDBUS_SKELETON))
#define IS_GDBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_GDBUS_SKELETON))

typedef struct _GDBUSSkeleton GDBUSSkeleton;
typedef struct _GDBUSSkeletonClass GDBUSSkeletonClass;
typedef struct _GDBUSSkeletonPrivate GDBUSSkeletonPrivate;

struct _GDBUSSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GDBUSSkeletonPrivate *priv;
};

struct _GDBUSSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdbus_skeleton_get_type (void) G_GNUC_CONST;

GDBUS *gdbus_skeleton_new (void);


G_END_DECLS

#endif /* __GENERATED_CODE_H__ */
